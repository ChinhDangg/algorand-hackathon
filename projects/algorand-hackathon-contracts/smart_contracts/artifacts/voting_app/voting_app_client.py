# flake8: noqa
# fmt: off
# mypy: ignore-errors
# This file was automatically generated by algokit-client-generator.
# DO NOT MODIFY IT BY HAND.
# requires: algokit-utils@^3.0.0

# common
import dataclasses
import typing
# core algosdk
import algosdk
from algosdk.transaction import OnComplete
from algosdk.atomic_transaction_composer import TransactionSigner
from algosdk.source_map import SourceMap
from algosdk.transaction import Transaction
from algosdk.v2client.models import SimulateTraceConfig
# utils
import algokit_utils
from algokit_utils import AlgorandClient as _AlgoKitAlgorandClient

_APP_SPEC_JSON = r"""{"arcs": [22, 28], "bareActions": {"call": [], "create": []}, "methods": [{"actions": {"call": [], "create": ["NoOp"]}, "args": [{"type": "account", "name": "admin"}], "name": "create", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "account", "name": "acct"}], "name": "add_member", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "account", "name": "acct"}], "name": "remove_member", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "account", "name": "acct"}], "name": "is_member", "returns": {"type": "uint64"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "string", "name": "description"}, {"type": "uint64", "name": "end_round"}], "name": "create_proposal", "returns": {"type": "uint64"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "name": "pid"}], "name": "get_proposal_details", "returns": {"type": "(string,uint64,uint64,uint64)"}, "events": [], "readonly": true, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "name": "pid"}, {"type": "uint64", "name": "choice"}], "name": "vote", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "name": "pid"}], "name": "finalize", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "name": "pid"}, {"type": "account", "name": "candidate"}], "name": "record_accept", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}], "name": "VotingApp", "state": {"keys": {"box": {}, "global": {"admin": {"key": "YWRtaW4=", "keyType": "AVMString", "valueType": "address"}, "next_pid": {"key": "bmV4dF9waWQ=", "keyType": "AVMString", "valueType": "AVMUint64"}, "member_count": {"key": "bWVtYmVyX2NvdW50", "keyType": "AVMString", "valueType": "AVMUint64"}}, "local": {}}, "maps": {"box": {"members": {"keyType": "address", "valueType": "uint64", "prefix": "bWVtYmVy"}, "proposals": {"keyType": "uint64", "valueType": "string", "prefix": "cHJvcA=="}, "yes_votes": {"keyType": "uint64", "valueType": "uint64", "prefix": "eWVz"}, "no_votes": {"keyType": "uint64", "valueType": "uint64", "prefix": "bm8="}, "status": {"keyType": "uint64", "valueType": "uint64", "prefix": "c3RhdA=="}, "end_round": {"keyType": "uint64", "valueType": "uint64", "prefix": "ZW5k"}, "required_n": {"keyType": "uint64", "valueType": "uint64", "prefix": "cmVxbg=="}, "voted_n": {"keyType": "uint64", "valueType": "uint64", "prefix": "dm90ZWRu"}, "vote_receipt": {"keyType": "(uint64,address)", "valueType": "uint64", "prefix": "cmNwdA=="}, "accepted": {"keyType": "uint64", "valueType": "address", "prefix": "YWNj"}}, "global": {}, "local": {}}, "schema": {"global": {"bytes": 1, "ints": 2}, "local": {"bytes": 0, "ints": 0}}}, "structs": {}, "byteCode": {"approval": "CiADAQACJg0MbWVtYmVyX2NvdW50BWFkbWluBm1lbWJlcgRzdGF0A3llcwJubwQVH3x1CG5leHRfcGlkA2VuZAZ2b3RlZG4EcHJvcARyZXFuBHJjcHQxG0EARoIJBIVKUY0EzNkPEwSY1joeBP+j3VUE1AGRnQQL4fPSBKJ4qLYETpGbFQQJoz//NhoAjgkAvACqAJgAgQBoADwAKAAYAAIjQzEZFEQxGEQ2GgEXNhoCF8AciALLIkMxGRREMRhENhoBF4gCSyJDMRkURDEYRDYaARc2GgIXiAGlIkMxGRREMRhENhoBF4gBYU8CFk8CFk8CFoACABpPA1BPAlBMUExQJwZMULAiQzEZFEQxGEQ2GgE2GgIXiADXFicGTFCwIkMxGRREMRhENhoBF8AciACuJwZMULAiQzEZFEQxGEQ2GgEXwByIAGIiQzEZFEQxGEQ2GgEXwByIACQiQzEZFEQxGBRENhoBF8AciAACIkOKAQApi/9nJwciZygjZ4mKAQAxACMpZUQSRCqL/1BJvkwXTEEABYsBQAAPIhaLAEy/IyhlRCIIKExniYoBADEAIyllRBJEKov/UEm+TBdMQQAdiwEiEkEAFiMWiwBMvyMoZURBAAkjKGVEIgkoTGeJigEBKov/UL5MFyNMTwJNFomKAgExACMpZUQSRCMnB2VESSIIJwdMZ0kWJwpLAVBJvEiL/r8nBEsBUCMWTEsBvycFSwJQSwG/K0sCUCIWvycISwJQi/8WvyMoZUQnC0sDUEwWvycJTwJQTL+JigEEi/8WJwpLAVC+RCcESwJQvkwXI0xPAk0nBUsDUL5MFyNMTwJNK08EUL5MFyNMTwJNiYoCACOAACoxAFC+TBdMQQB9iwIiEkEAdiJEi/4WSYwAK0xQvkwXjAFBAF+LASISQQBYIkQnCIsASU4CUL5EFzIGD0RJMQBQJwxMUL5FARRESTEAUCcMTFAiFr8nCUxQSb5EFyIIFr+L/yISQQAOJwSLAFBJvkQXIggWv4knBYsAUEm+RBciCBa/iSNC/6UjQv+HigEAgACL/xZJK0xQSb5MF0xBAFiLAyISQQBRIkQnC4sBSU4CUL5EFycJSwJQvkQXJwhPA1C+RBeMABJAAAgyBosAD0EAIiJEJwSLAUlOAlC+RBcnBU8CUL5EFw2BAyRPAk0WiwJMv4kjQv/bI0L/rIoCACOAADEAIyllRBJEi/4WSStMUL5MF0xBADiLAyQSQQAxIkSAA2FjY4sCUIv/vyqL/1BJjAC+TBeMAUEABYsBQAAPIhaLAEy/IyhlRCIIKExniSNC/8w=", "clear": "CoEBQw=="}, "events": [], "networks": {}, "source": {"approval": "", "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"}, "sourceInfo": {"approval": {"pcOffsetMethod": "none", "sourceInfo": [{"pc": [719], "errorMessage": "Already voted"}, {"pc": [665], "errorMessage": "Not a member"}, {"pc": [691, 814], "errorMessage": "Not active"}, {"pc": [166, 188, 204, 224, 268, 293, 316, 334, 352], "errorMessage": "OnCompletion is not NoOp"}, {"pc": [507], "errorMessage": "Only admin"}, {"pc": [393], "errorMessage": "Only admin can add"}, {"pc": [911], "errorMessage": "Only admin can record"}, {"pc": [437], "errorMessage": "Only admin can remove"}, {"pc": [600], "errorMessage": "Proposal not found"}, {"pc": [934], "errorMessage": "Proposal not passed"}, {"pc": [857], "errorMessage": "Too early"}, {"pc": [706], "errorMessage": "Voting window closed"}, {"pc": [356], "errorMessage": "can only call when creating"}, {"pc": [169, 191, 207, 227, 271, 296, 319, 337], "errorMessage": "can only call when not creating"}, {"pc": [391, 435, 505, 909], "errorMessage": "check self.admin exists"}, {"pc": [701, 840], "errorMessage": "check self.end_round entry exists"}, {"pc": [420, 466, 473, 571, 975], "errorMessage": "check self.member_count exists"}, {"pc": [512], "errorMessage": "check self.next_pid exists"}, {"pc": [771, 875], "errorMessage": "check self.no_votes entry exists"}, {"pc": [824], "errorMessage": "check self.required_n entry exists"}, {"pc": [737, 832], "errorMessage": "check self.voted_n entry exists"}, {"pc": [757, 867], "errorMessage": "check self.yes_votes entry exists"}]}, "clear": {"pcOffsetMethod": "none", "sourceInfo": []}}, "templateVariables": {}}"""
APP_SPEC = algokit_utils.Arc56Contract.from_json(_APP_SPEC_JSON)

def _parse_abi_args(args: object | None = None) -> list[object] | None:
    """Helper to parse ABI args into the format expected by underlying client"""
    if args is None:
        return None

    def convert_dataclass(value: object) -> object:
        if dataclasses.is_dataclass(value):
            return tuple(convert_dataclass(getattr(value, field.name)) for field in dataclasses.fields(value))
        elif isinstance(value, (list, tuple)):
            return type(value)(convert_dataclass(item) for item in value)
        return value

    match args:
        case tuple():
            method_args = list(args)
        case _ if dataclasses.is_dataclass(args):
            method_args = [getattr(args, field.name) for field in dataclasses.fields(args)]
        case _:
            raise ValueError("Invalid 'args' type. Expected 'tuple' or 'TypedDict' for respective typed arguments.")

    return [
        convert_dataclass(arg) if not isinstance(arg, algokit_utils.AppMethodCallTransactionArgument) else arg
        for arg in method_args
    ] if method_args else None

def _init_dataclass(cls: type, data: dict) -> object:
    """
    Recursively instantiate a dataclass of type `cls` from `data`.

    For each field on the dataclass, if the field type is also a dataclass
    and the corresponding data is a dict, instantiate that field recursively.
    """
    field_values = {}
    for field in dataclasses.fields(cls):
        field_value = data.get(field.name)
        # Check if the field expects another dataclass and the value is a dict.
        if dataclasses.is_dataclass(field.type) and isinstance(field_value, dict):
            field_values[field.name] = _init_dataclass(typing.cast(type, field.type), field_value)
        else:
            field_values[field.name] = field_value
    return cls(**field_values)

@dataclasses.dataclass(frozen=True, kw_only=True)
class AddMemberArgs:
    """Dataclass for add_member arguments"""
    acct: str | bytes

    @property
    def abi_method_signature(self) -> str:
        return "add_member(account)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class RemoveMemberArgs:
    """Dataclass for remove_member arguments"""
    acct: str | bytes

    @property
    def abi_method_signature(self) -> str:
        return "remove_member(account)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class IsMemberArgs:
    """Dataclass for is_member arguments"""
    acct: str | bytes

    @property
    def abi_method_signature(self) -> str:
        return "is_member(account)uint64"

@dataclasses.dataclass(frozen=True, kw_only=True)
class CreateProposalArgs:
    """Dataclass for create_proposal arguments"""
    description: str
    end_round: int

    @property
    def abi_method_signature(self) -> str:
        return "create_proposal(string,uint64)uint64"

@dataclasses.dataclass(frozen=True, kw_only=True)
class GetProposalDetailsArgs:
    """Dataclass for get_proposal_details arguments"""
    pid: int

    @property
    def abi_method_signature(self) -> str:
        return "get_proposal_details(uint64)(string,uint64,uint64,uint64)"

@dataclasses.dataclass(frozen=True, kw_only=True)
class VoteArgs:
    """Dataclass for vote arguments"""
    pid: int
    choice: int

    @property
    def abi_method_signature(self) -> str:
        return "vote(uint64,uint64)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class FinalizeArgs:
    """Dataclass for finalize arguments"""
    pid: int

    @property
    def abi_method_signature(self) -> str:
        return "finalize(uint64)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class RecordAcceptArgs:
    """Dataclass for record_accept arguments"""
    pid: int
    candidate: str | bytes

    @property
    def abi_method_signature(self) -> str:
        return "record_accept(uint64,account)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class CreateArgs:
    """Dataclass for create arguments"""
    admin: str | bytes

    @property
    def abi_method_signature(self) -> str:
        return "create(account)void"


class VotingAppParams:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def add_member(
        self,
        args: tuple[str | bytes] | AddMemberArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "add_member(account)void",
            "args": method_args,
        }))

    def remove_member(
        self,
        args: tuple[str | bytes] | RemoveMemberArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "remove_member(account)void",
            "args": method_args,
        }))

    def is_member(
        self,
        args: tuple[str | bytes] | IsMemberArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "is_member(account)uint64",
            "args": method_args,
        }))

    def create_proposal(
        self,
        args: tuple[str, int] | CreateProposalArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "create_proposal(string,uint64)uint64",
            "args": method_args,
        }))

    def get_proposal_details(
        self,
        args: tuple[int] | GetProposalDetailsArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_proposal_details(uint64)(string,uint64,uint64,uint64)",
            "args": method_args,
        }))

    def vote(
        self,
        args: tuple[int, int] | VoteArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "vote(uint64,uint64)void",
            "args": method_args,
        }))

    def finalize(
        self,
        args: tuple[int] | FinalizeArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "finalize(uint64)void",
            "args": method_args,
        }))

    def record_accept(
        self,
        args: tuple[int, str | bytes] | RecordAcceptArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "record_accept(uint64,account)void",
            "args": method_args,
        }))

    def create(
        self,
        args: tuple[str | bytes] | CreateArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "create(account)void",
            "args": method_args,
        }))

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        
    ) -> algokit_utils.AppCallParams:
        return self.app_client.params.bare.clear_state(
            params,
            
        )


class VotingAppCreateTransactionParams:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def add_member(
        self,
        args: tuple[str | bytes] | AddMemberArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "add_member(account)void",
            "args": method_args,
        }))

    def remove_member(
        self,
        args: tuple[str | bytes] | RemoveMemberArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "remove_member(account)void",
            "args": method_args,
        }))

    def is_member(
        self,
        args: tuple[str | bytes] | IsMemberArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "is_member(account)uint64",
            "args": method_args,
        }))

    def create_proposal(
        self,
        args: tuple[str, int] | CreateProposalArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "create_proposal(string,uint64)uint64",
            "args": method_args,
        }))

    def get_proposal_details(
        self,
        args: tuple[int] | GetProposalDetailsArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_proposal_details(uint64)(string,uint64,uint64,uint64)",
            "args": method_args,
        }))

    def vote(
        self,
        args: tuple[int, int] | VoteArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "vote(uint64,uint64)void",
            "args": method_args,
        }))

    def finalize(
        self,
        args: tuple[int] | FinalizeArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "finalize(uint64)void",
            "args": method_args,
        }))

    def record_accept(
        self,
        args: tuple[int, str | bytes] | RecordAcceptArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "record_accept(uint64,account)void",
            "args": method_args,
        }))

    def create(
        self,
        args: tuple[str | bytes] | CreateArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "create(account)void",
            "args": method_args,
        }))

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        
    ) -> Transaction:
        return self.app_client.create_transaction.bare.clear_state(
            params,
            
        )


class VotingAppSend:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def add_member(
        self,
        args: tuple[str | bytes] | AddMemberArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "add_member(account)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def remove_member(
        self,
        args: tuple[str | bytes] | RemoveMemberArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "remove_member(account)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def is_member(
        self,
        args: tuple[str | bytes] | IsMemberArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[int]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "is_member(account)uint64",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[int], parsed_response)

    def create_proposal(
        self,
        args: tuple[str, int] | CreateProposalArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[int]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "create_proposal(string,uint64)uint64",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[int], parsed_response)

    def get_proposal_details(
        self,
        args: tuple[int] | GetProposalDetailsArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[tuple[str, int, int, int]]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_proposal_details(uint64)(string,uint64,uint64,uint64)",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[tuple[str, int, int, int]], parsed_response)

    def vote(
        self,
        args: tuple[int, int] | VoteArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "vote(uint64,uint64)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def finalize(
        self,
        args: tuple[int] | FinalizeArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "finalize(uint64)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def record_accept(
        self,
        args: tuple[int, str | bytes] | RecordAcceptArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "record_accept(uint64,account)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def create(
        self,
        args: tuple[str | bytes] | CreateArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "create(account)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[algokit_utils.ABIReturn]:
        return self.app_client.send.bare.clear_state(
            params,
            send_params=send_params,
        )


class GlobalStateValue(typing.TypedDict):
    """Shape of global_state state key values"""
    admin: str
    next_pid: int
    member_count: int

class VotingAppState:
    """Methods to access state for the current VotingApp app"""

    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    @property
    def global_state(
        self
    ) -> "_GlobalState":
            """Methods to access global_state for the current app"""
            return _GlobalState(self.app_client)

    @property
    def box(
        self
    ) -> "_BoxState":
            """Methods to access box for the current app"""
            return _BoxState(self.app_client)

class _GlobalState:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client
        
        # Pre-generated mapping of value types to their struct classes
        self._struct_classes: dict[str, typing.Type[typing.Any]] = {}

    def get_all(self) -> GlobalStateValue:
        """Get all current keyed values from global_state state"""
        result = self.app_client.state.global_state.get_all()
        if not result:
            return typing.cast(GlobalStateValue, {})

        converted = {}
        for key, value in result.items():
            key_info = self.app_client.app_spec.state.keys.global_state.get(key)
            struct_class = self._struct_classes.get(key_info.value_type) if key_info else None
            converted[key] = (
                _init_dataclass(struct_class, value) if struct_class and isinstance(value, dict)
                else value
            )
        return typing.cast(GlobalStateValue, converted)

    @property
    def admin(self) -> str:
        """Get the current value of the admin key in global_state state"""
        value = self.app_client.state.global_state.get_value("admin")
        if isinstance(value, dict) and "address" in self._struct_classes:
            return _init_dataclass(self._struct_classes["address"], value)  # type: ignore
        return typing.cast(str, value)

    @property
    def next_pid(self) -> int:
        """Get the current value of the next_pid key in global_state state"""
        value = self.app_client.state.global_state.get_value("next_pid")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def member_count(self) -> int:
        """Get the current value of the member_count key in global_state state"""
        value = self.app_client.state.global_state.get_value("member_count")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

class _BoxState:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client
        
        # Pre-generated mapping of value types to their struct classes
        self._struct_classes: dict[str, typing.Type[typing.Any]] = {}

    def get_all(self) -> dict[str, typing.Any]:
        """Get all current keyed values from box state"""
        result = self.app_client.state.box.get_all()
        if not result:
            return {}

        converted = {}
        for key, value in result.items():
            key_info = self.app_client.app_spec.state.keys.box.get(key)
            struct_class = self._struct_classes.get(key_info.value_type) if key_info else None
            converted[key] = (
                _init_dataclass(struct_class, value) if struct_class and isinstance(value, dict)
                else value
            )
        return converted

    @property
    def members(self) -> "_MapState[str, int]":
        """Get values from the members map in box state"""
        return _MapState(
            self.app_client.state.box,
            "members",
            None
        )

    @property
    def proposals(self) -> "_MapState[int, str]":
        """Get values from the proposals map in box state"""
        return _MapState(
            self.app_client.state.box,
            "proposals",
            None
        )

    @property
    def yes_votes(self) -> "_MapState[int, int]":
        """Get values from the yes_votes map in box state"""
        return _MapState(
            self.app_client.state.box,
            "yes_votes",
            None
        )

    @property
    def no_votes(self) -> "_MapState[int, int]":
        """Get values from the no_votes map in box state"""
        return _MapState(
            self.app_client.state.box,
            "no_votes",
            None
        )

    @property
    def status(self) -> "_MapState[int, int]":
        """Get values from the status map in box state"""
        return _MapState(
            self.app_client.state.box,
            "status",
            None
        )

    @property
    def end_round(self) -> "_MapState[int, int]":
        """Get values from the end_round map in box state"""
        return _MapState(
            self.app_client.state.box,
            "end_round",
            None
        )

    @property
    def required_n(self) -> "_MapState[int, int]":
        """Get values from the required_n map in box state"""
        return _MapState(
            self.app_client.state.box,
            "required_n",
            None
        )

    @property
    def voted_n(self) -> "_MapState[int, int]":
        """Get values from the voted_n map in box state"""
        return _MapState(
            self.app_client.state.box,
            "voted_n",
            None
        )

    @property
    def vote_receipt(self) -> "_MapState[tuple[int, str], int]":
        """Get values from the vote_receipt map in box state"""
        return _MapState(
            self.app_client.state.box,
            "vote_receipt",
            None
        )

    @property
    def accepted(self) -> "_MapState[int, str]":
        """Get values from the accepted map in box state"""
        return _MapState(
            self.app_client.state.box,
            "accepted",
            None
        )

_KeyType = typing.TypeVar("_KeyType")
_ValueType = typing.TypeVar("_ValueType")

class _AppClientStateMethodsProtocol(typing.Protocol):
    def get_map(self, map_name: str) -> dict[typing.Any, typing.Any]:
        ...
    def get_map_value(self, map_name: str, key: typing.Any) -> typing.Any | None:
        ...

class _MapState(typing.Generic[_KeyType, _ValueType]):
    """Generic class for accessing state maps with strongly typed keys and values"""

    def __init__(self, state_accessor: _AppClientStateMethodsProtocol, map_name: str,
                struct_class: typing.Type[_ValueType] | None = None):
        self._state_accessor = state_accessor
        self._map_name = map_name
        self._struct_class = struct_class

    def get_map(self) -> dict[_KeyType, _ValueType]:
        """Get all current values in the map"""
        result = self._state_accessor.get_map(self._map_name)
        if self._struct_class and result:
            return {k: _init_dataclass(self._struct_class, v) if isinstance(v, dict) else v
                    for k, v in result.items()}  # type: ignore
        return typing.cast(dict[_KeyType, _ValueType], result or {})

    def get_value(self, key: _KeyType) -> _ValueType | None:
        """Get a value from the map by key"""
        key_value = dataclasses.asdict(key) if dataclasses.is_dataclass(key) else key  # type: ignore
        value = self._state_accessor.get_map_value(self._map_name, key_value)
        if value is not None and self._struct_class and isinstance(value, dict):
            return _init_dataclass(self._struct_class, value)  # type: ignore
        return typing.cast(_ValueType | None, value)


class VotingAppClient:
    """Client for interacting with VotingApp smart contract"""

    @typing.overload
    def __init__(self, app_client: algokit_utils.AppClient) -> None: ...
    
    @typing.overload
    def __init__(
        self,
        *,
        algorand: _AlgoKitAlgorandClient,
        app_id: int,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> None: ...

    def __init__(
        self,
        app_client: algokit_utils.AppClient | None = None,
        *,
        algorand: _AlgoKitAlgorandClient | None = None,
        app_id: int | None = None,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> None:
        if app_client:
            self.app_client = app_client
        elif algorand and app_id:
            self.app_client = algokit_utils.AppClient(
                algokit_utils.AppClientParams(
                    algorand=algorand,
                    app_spec=APP_SPEC,
                    app_id=app_id,
                    app_name=app_name,
                    default_sender=default_sender,
                    default_signer=default_signer,
                    approval_source_map=approval_source_map,
                    clear_source_map=clear_source_map,
                )
            )
        else:
            raise ValueError("Either app_client or algorand and app_id must be provided")
    
        self.params = VotingAppParams(self.app_client)
        self.create_transaction = VotingAppCreateTransactionParams(self.app_client)
        self.send = VotingAppSend(self.app_client)
        self.state = VotingAppState(self.app_client)

    @staticmethod
    def from_creator_and_name(
        creator_address: str,
        app_name: str,
        algorand: _AlgoKitAlgorandClient,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
        ignore_cache: bool | None = None,
        app_lookup_cache: algokit_utils.ApplicationLookup | None = None,
    ) -> "VotingAppClient":
        return VotingAppClient(
            algokit_utils.AppClient.from_creator_and_name(
                creator_address=creator_address,
                app_name=app_name,
                app_spec=APP_SPEC,
                algorand=algorand,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
                ignore_cache=ignore_cache,
                app_lookup_cache=app_lookup_cache,
            )
        )
    
    @staticmethod
    def from_network(
        algorand: _AlgoKitAlgorandClient,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> "VotingAppClient":
        return VotingAppClient(
            algokit_utils.AppClient.from_network(
                app_spec=APP_SPEC,
                algorand=algorand,
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
            )
        )

    @property
    def app_id(self) -> int:
        return self.app_client.app_id
    
    @property
    def app_address(self) -> str:
        return self.app_client.app_address
    
    @property
    def app_name(self) -> str:
        return self.app_client.app_name
    
    @property
    def app_spec(self) -> algokit_utils.Arc56Contract:
        return self.app_client.app_spec
    
    @property
    def algorand(self) -> _AlgoKitAlgorandClient:
        return self.app_client.algorand

    def clone(
        self,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> "VotingAppClient":
        return VotingAppClient(
            self.app_client.clone(
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
            )
        )

    def new_group(self) -> "VotingAppComposer":
        return VotingAppComposer(self)

    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["add_member(account)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["remove_member(account)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["is_member(account)uint64"],
        return_value: algokit_utils.ABIReturn | None
    ) -> int | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["create_proposal(string,uint64)uint64"],
        return_value: algokit_utils.ABIReturn | None
    ) -> int | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["get_proposal_details(uint64)(string,uint64,uint64,uint64)"],
        return_value: algokit_utils.ABIReturn | None
    ) -> tuple[str, int, int, int] | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["vote(uint64,uint64)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["finalize(uint64)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["record_accept(uint64,account)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["create(account)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: str,
        return_value: algokit_utils.ABIReturn | None
    ) -> algokit_utils.ABIValue | algokit_utils.ABIStruct | None: ...

    def decode_return_value(
        self,
        method: str,
        return_value: algokit_utils.ABIReturn | None
    ) -> algokit_utils.ABIValue | algokit_utils.ABIStruct | None | int | tuple[str, int, int, int]:
        """Decode ABI return value for the given method."""
        if return_value is None:
            return None
    
        arc56_method = self.app_spec.get_arc56_method(method)
        decoded = return_value.get_arc56_value(arc56_method, self.app_spec.structs)
    
        # If method returns a struct, convert the dict to appropriate dataclass
        if (arc56_method and
            arc56_method.returns and
            arc56_method.returns.struct and
            isinstance(decoded, dict)):
            struct_class = globals().get(arc56_method.returns.struct)
            if struct_class:
                return struct_class(**typing.cast(dict, decoded))
        return decoded


@dataclasses.dataclass(frozen=True)
class VotingAppMethodCallCreateParams(
    algokit_utils.AppClientCreateSchema, algokit_utils.BaseAppClientMethodCallParams[
        CreateArgs,
        str | None,
    ]
):
    """Parameters for creating VotingApp contract using ABI"""
    on_complete: typing.Literal[OnComplete.NoOpOC] | None = None
    method: str | None = None

    def to_algokit_utils_params(self) -> algokit_utils.AppClientMethodCallCreateParams:
        method_args = _parse_abi_args(self.args)
        return algokit_utils.AppClientMethodCallCreateParams(
            **{
                **self.__dict__,
                "method": self.method or getattr(self.args, "abi_method_signature", None),
                "args": method_args,
            }
        )

class VotingAppFactory(algokit_utils.TypedAppFactoryProtocol[VotingAppMethodCallCreateParams, None, None]):
    """Factory for deploying and managing VotingAppClient smart contracts"""

    def __init__(
        self,
        algorand: _AlgoKitAlgorandClient,
        *,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        version: str | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
    ):
        self.app_factory = algokit_utils.AppFactory(
            params=algokit_utils.AppFactoryParams(
                algorand=algorand,
                app_spec=APP_SPEC,
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                version=version,
                compilation_params=compilation_params,
            )
        )
        self.params = VotingAppFactoryParams(self.app_factory)
        self.create_transaction = VotingAppFactoryCreateTransaction(self.app_factory)
        self.send = VotingAppFactorySend(self.app_factory)

    @property
    def app_name(self) -> str:
        return self.app_factory.app_name
    
    @property
    def app_spec(self) -> algokit_utils.Arc56Contract:
        return self.app_factory.app_spec
    
    @property
    def algorand(self) -> _AlgoKitAlgorandClient:
        return self.app_factory.algorand

    def deploy(
        self,
        *,
        on_update: algokit_utils.OnUpdate | None = None,
        on_schema_break: algokit_utils.OnSchemaBreak | None = None,
        create_params: VotingAppMethodCallCreateParams | None = None,
        update_params: None = None,
        delete_params: None = None,
        existing_deployments: algokit_utils.ApplicationLookup | None = None,
        ignore_cache: bool = False,
        app_name: str | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
        send_params: algokit_utils.SendParams | None = None,
    ) -> tuple[VotingAppClient, algokit_utils.AppFactoryDeployResult]:
        """Deploy the application"""
        deploy_response = self.app_factory.deploy(
            on_update=on_update,
            on_schema_break=on_schema_break,
            create_params=create_params.to_algokit_utils_params() if create_params else None,
            update_params=update_params,
            delete_params=delete_params,
            existing_deployments=existing_deployments,
            ignore_cache=ignore_cache,
            app_name=app_name,
            compilation_params=compilation_params,
            send_params=send_params,
        )

        return VotingAppClient(deploy_response[0]), deploy_response[1]

    def get_app_client_by_creator_and_name(
        self,
        creator_address: str,
        app_name: str,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        ignore_cache: bool | None = None,
        app_lookup_cache: algokit_utils.ApplicationLookup | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> VotingAppClient:
        """Get an app client by creator address and name"""
        return VotingAppClient(
            self.app_factory.get_app_client_by_creator_and_name(
                creator_address,
                app_name,
                default_sender,
                default_signer,
                ignore_cache,
                app_lookup_cache,
                approval_source_map,
                clear_source_map,
            )
        )

    def get_app_client_by_id(
        self,
        app_id: int,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> VotingAppClient:
        """Get an app client by app ID"""
        return VotingAppClient(
            self.app_factory.get_app_client_by_id(
                app_id,
                app_name,
                default_sender,
                default_signer,
                approval_source_map,
                clear_source_map,
            )
        )


class VotingAppFactoryParams:
    """Parameters for creating transactions for VotingApp contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = VotingAppFactoryCreateParams(app_factory)
        self.update = VotingAppFactoryUpdateParams(app_factory)
        self.delete = VotingAppFactoryDeleteParams(app_factory)

class VotingAppFactoryCreateParams:
    """Parameters for 'create' operations of VotingApp contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateParams:
        """Creates an instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
            compilation_params=compilation_params)

    def add_member(
        self,
        args: tuple[str | bytes] | AddMemberArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the add_member(account)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "add_member(account)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def remove_member(
        self,
        args: tuple[str | bytes] | RemoveMemberArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the remove_member(account)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "remove_member(account)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def is_member(
        self,
        args: tuple[str | bytes] | IsMemberArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the is_member(account)uint64 ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "is_member(account)uint64",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def create_proposal(
        self,
        args: tuple[str, int] | CreateProposalArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the create_proposal(string,uint64)uint64 ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "create_proposal(string,uint64)uint64",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def get_proposal_details(
        self,
        args: tuple[int] | GetProposalDetailsArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the get_proposal_details(uint64)(string,uint64,uint64,uint64) ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "get_proposal_details(uint64)(string,uint64,uint64,uint64)",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def vote(
        self,
        args: tuple[int, int] | VoteArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the vote(uint64,uint64)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "vote(uint64,uint64)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def finalize(
        self,
        args: tuple[int] | FinalizeArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the finalize(uint64)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "finalize(uint64)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def record_accept(
        self,
        args: tuple[int, str | bytes] | RecordAcceptArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the record_accept(uint64,account)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "record_accept(uint64,account)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def create(
        self,
        args: tuple[str | bytes] | CreateArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the create(account)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "create(account)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

class VotingAppFactoryUpdateParams:
    """Parameters for 'update' operations of VotingApp contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        
    ) -> algokit_utils.AppUpdateParams:
        """Updates an instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.bare.deploy_update(
            algokit_utils.AppClientBareCallParams(**dataclasses.asdict(params)),
            )

class VotingAppFactoryDeleteParams:
    """Parameters for 'delete' operations of VotingApp contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        
    ) -> algokit_utils.AppDeleteParams:
        """Deletes an instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.bare.deploy_delete(
            algokit_utils.AppClientBareCallParams(**dataclasses.asdict(params)),
            )


class VotingAppFactoryCreateTransaction:
    """Create transactions for VotingApp contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = VotingAppFactoryCreateTransactionCreate(app_factory)


class VotingAppFactoryCreateTransactionCreate:
    """Create new instances of VotingApp contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
    ) -> Transaction:
        """Creates a new instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.create_transaction.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
        )


class VotingAppFactorySend:
    """Send calls to VotingApp contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = VotingAppFactorySendCreate(app_factory)


class VotingAppFactorySendCreate:
    """Send create calls to VotingApp contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        send_params: algokit_utils.SendParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
    ) -> tuple[VotingAppClient, algokit_utils.SendAppCreateTransactionResult]:
        """Creates a new instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        result = self.app_factory.send.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
            send_params=send_params,
            compilation_params=compilation_params
        )
        return VotingAppClient(result[0]), result[1]

    def create(
        self,
        args: tuple[str | bytes] | CreateArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        send_params: algokit_utils.SendParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> tuple[VotingAppClient, algokit_utils.AppFactoryCreateMethodCallResult[None]]:
            """Creates and sends a transaction using the create(account)void ABI method"""
            params = params or algokit_utils.CommonAppCallCreateParams()
            client, result = self.app_factory.send.create(
                algokit_utils.AppFactoryCreateMethodCallParams(
                    **{
                    **dataclasses.asdict(params),
                    "method": "create(account)void",
                    "args": _parse_abi_args(args),
                    }
                ),
                send_params=send_params,
                compilation_params=compilation_params
            )
            return_value = None if result.abi_return is None else typing.cast(None, result.abi_return)
    
            return VotingAppClient(client), algokit_utils.AppFactoryCreateMethodCallResult[None](
                **{
                    **result.__dict__,
                    "app_id": result.app_id,
                    "abi_return": return_value,
                    "transaction": result.transaction,
                    "confirmation": result.confirmation,
                    "group_id": result.group_id,
                    "tx_ids": result.tx_ids,
                    "transactions": result.transactions,
                    "confirmations": result.confirmations,
                    "app_address": result.app_address,
                }
            )


class VotingAppComposer:
    """Composer for creating transaction groups for VotingApp contract calls"""

    def __init__(self, client: "VotingAppClient"):
        self.client = client
        self._composer = client.algorand.new_group()
        self._result_mappers: list[typing.Callable[[algokit_utils.ABIReturn | None], object] | None] = []

    def add_member(
        self,
        args: tuple[str | bytes] | AddMemberArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "VotingAppComposer":
        self._composer.add_app_call_method_call(
            self.client.params.add_member(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "add_member(account)void", v
            )
        )
        return self

    def remove_member(
        self,
        args: tuple[str | bytes] | RemoveMemberArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "VotingAppComposer":
        self._composer.add_app_call_method_call(
            self.client.params.remove_member(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "remove_member(account)void", v
            )
        )
        return self

    def is_member(
        self,
        args: tuple[str | bytes] | IsMemberArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "VotingAppComposer":
        self._composer.add_app_call_method_call(
            self.client.params.is_member(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "is_member(account)uint64", v
            )
        )
        return self

    def create_proposal(
        self,
        args: tuple[str, int] | CreateProposalArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "VotingAppComposer":
        self._composer.add_app_call_method_call(
            self.client.params.create_proposal(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "create_proposal(string,uint64)uint64", v
            )
        )
        return self

    def get_proposal_details(
        self,
        args: tuple[int] | GetProposalDetailsArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "VotingAppComposer":
        self._composer.add_app_call_method_call(
            self.client.params.get_proposal_details(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "get_proposal_details(uint64)(string,uint64,uint64,uint64)", v
            )
        )
        return self

    def vote(
        self,
        args: tuple[int, int] | VoteArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "VotingAppComposer":
        self._composer.add_app_call_method_call(
            self.client.params.vote(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "vote(uint64,uint64)void", v
            )
        )
        return self

    def finalize(
        self,
        args: tuple[int] | FinalizeArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "VotingAppComposer":
        self._composer.add_app_call_method_call(
            self.client.params.finalize(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "finalize(uint64)void", v
            )
        )
        return self

    def record_accept(
        self,
        args: tuple[int, str | bytes] | RecordAcceptArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "VotingAppComposer":
        self._composer.add_app_call_method_call(
            self.client.params.record_accept(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "record_accept(uint64,account)void", v
            )
        )
        return self

    def create(
        self,
        args: tuple[str | bytes] | CreateArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "VotingAppComposer":
        self._composer.add_app_call_method_call(
            self.client.params.create(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "create(account)void", v
            )
        )
        return self

    def clear_state(
        self,
        *,
        args: list[bytes] | None = None,
        params: algokit_utils.CommonAppCallParams | None = None,
    ) -> "VotingAppComposer":
        params=params or algokit_utils.CommonAppCallParams()
        self._composer.add_app_call(
            self.client.params.clear_state(
                algokit_utils.AppClientBareCallParams(
                    **{
                        **dataclasses.asdict(params),
                        "args": args
                    }
                )
            )
        )
        return self
    
    def add_transaction(
        self, txn: Transaction, signer: TransactionSigner | None = None
    ) -> "VotingAppComposer":
        self._composer.add_transaction(txn, signer)
        return self
    
    def composer(self) -> algokit_utils.TransactionComposer:
        return self._composer
    
    def simulate(
        self,
        allow_more_logs: bool | None = None,
        allow_empty_signatures: bool | None = None,
        allow_unnamed_resources: bool | None = None,
        extra_opcode_budget: int | None = None,
        exec_trace_config: SimulateTraceConfig | None = None,
        simulation_round: int | None = None,
        skip_signatures: bool | None = None,
    ) -> algokit_utils.SendAtomicTransactionComposerResults:
        return self._composer.simulate(
            allow_more_logs=allow_more_logs,
            allow_empty_signatures=allow_empty_signatures,
            allow_unnamed_resources=allow_unnamed_resources,
            extra_opcode_budget=extra_opcode_budget,
            exec_trace_config=exec_trace_config,
            simulation_round=simulation_round,
            skip_signatures=skip_signatures,
        )
    
    def send(
        self,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAtomicTransactionComposerResults:
        return self._composer.send(send_params)
