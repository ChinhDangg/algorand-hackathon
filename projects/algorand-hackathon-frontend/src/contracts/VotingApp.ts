/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"VotingApp","structs":{},"methods":[{"name":"create","args":[{"type":"account","name":"admin"}],"returns":{"type":"void"},"actions":{"create":["NoOp"],"call":[]},"readonly":false,"events":[],"recommendations":{}},{"name":"add_member","args":[{"type":"account","name":"acct"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"remove_member","args":[{"type":"account","name":"acct"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"is_member","args":[{"type":"account","name":"acct"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"create_proposal","args":[{"type":"string","name":"description"},{"type":"uint64","name":"end_round"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"get_proposal_details","args":[{"type":"uint64","name":"pid"}],"returns":{"type":"(string,uint64,uint64,uint64)"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"events":[],"recommendations":{}},{"name":"vote","args":[{"type":"uint64","name":"pid"},{"type":"uint64","name":"choice"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"finalize","args":[{"type":"uint64","name":"pid"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"record_accept","args":[{"type":"uint64","name":"pid"},{"type":"account","name":"candidate"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}}],"arcs":[22,28],"networks":{},"state":{"schema":{"global":{"ints":2,"bytes":1},"local":{"ints":0,"bytes":0}},"keys":{"global":{"admin":{"keyType":"AVMString","valueType":"address","key":"YWRtaW4="},"next_pid":{"keyType":"AVMString","valueType":"AVMUint64","key":"bmV4dF9waWQ="},"member_count":{"keyType":"AVMString","valueType":"AVMUint64","key":"bWVtYmVyX2NvdW50"}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{"members":{"keyType":"address","valueType":"uint64","prefix":"bWVtYmVy"},"proposals":{"keyType":"uint64","valueType":"string","prefix":"cHJvcA=="},"yes_votes":{"keyType":"uint64","valueType":"uint64","prefix":"eWVz"},"no_votes":{"keyType":"uint64","valueType":"uint64","prefix":"bm8="},"status":{"keyType":"uint64","valueType":"uint64","prefix":"c3RhdA=="},"end_round":{"keyType":"uint64","valueType":"uint64","prefix":"ZW5k"},"required_n":{"keyType":"uint64","valueType":"uint64","prefix":"cmVxbg=="},"voted_n":{"keyType":"uint64","valueType":"uint64","prefix":"dm90ZWRu"},"vote_receipt":{"keyType":"(uint64,address)","valueType":"uint64","prefix":"cmNwdA=="},"accepted":{"keyType":"uint64","valueType":"address","prefix":"YWNj"}}}},"bareActions":{"create":[],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[719],"errorMessage":"Already voted"},{"pc":[665],"errorMessage":"Not a member"},{"pc":[691,814],"errorMessage":"Not active"},{"pc":[166,188,204,224,268,293,316,334,352],"errorMessage":"OnCompletion is not NoOp"},{"pc":[507],"errorMessage":"Only admin"},{"pc":[393],"errorMessage":"Only admin can add"},{"pc":[911],"errorMessage":"Only admin can record"},{"pc":[437],"errorMessage":"Only admin can remove"},{"pc":[600],"errorMessage":"Proposal not found"},{"pc":[934],"errorMessage":"Proposal not passed"},{"pc":[857],"errorMessage":"Too early"},{"pc":[706],"errorMessage":"Voting window closed"},{"pc":[356],"errorMessage":"can only call when creating"},{"pc":[169,191,207,227,271,296,319,337],"errorMessage":"can only call when not creating"},{"pc":[391,435,505,909],"errorMessage":"check self.admin exists"},{"pc":[701,840],"errorMessage":"check self.end_round entry exists"},{"pc":[420,466,473,571,975],"errorMessage":"check self.member_count exists"},{"pc":[512],"errorMessage":"check self.next_pid exists"},{"pc":[771,875],"errorMessage":"check self.no_votes entry exists"},{"pc":[824],"errorMessage":"check self.required_n entry exists"},{"pc":[737,832],"errorMessage":"check self.voted_n entry exists"},{"pc":[757,867],"errorMessage":"check self.yes_votes entry exists"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"},"byteCode":{"approval":"CiADAQACJg0MbWVtYmVyX2NvdW50BWFkbWluBm1lbWJlcgRzdGF0A3llcwJubwQVH3x1CG5leHRfcGlkA2VuZAZ2b3RlZG4EcHJvcARyZXFuBHJjcHQxG0EARoIJBIVKUY0EzNkPEwSY1joeBP+j3VUE1AGRnQQL4fPSBKJ4qLYETpGbFQQJoz//NhoAjgkAvACqAJgAgQBoADwAKAAYAAIjQzEZFEQxGEQ2GgEXNhoCF8AciALLIkMxGRREMRhENhoBF4gCSyJDMRkURDEYRDYaARc2GgIXiAGlIkMxGRREMRhENhoBF4gBYU8CFk8CFk8CFoACABpPA1BPAlBMUExQJwZMULAiQzEZFEQxGEQ2GgE2GgIXiADXFicGTFCwIkMxGRREMRhENhoBF8AciACuJwZMULAiQzEZFEQxGEQ2GgEXwByIAGIiQzEZFEQxGEQ2GgEXwByIACQiQzEZFEQxGBRENhoBF8AciAACIkOKAQApi/9nJwciZygjZ4mKAQAxACMpZUQSRCqL/1BJvkwXTEEABYsBQAAPIhaLAEy/IyhlRCIIKExniYoBADEAIyllRBJEKov/UEm+TBdMQQAdiwEiEkEAFiMWiwBMvyMoZURBAAkjKGVEIgkoTGeJigEBKov/UL5MFyNMTwJNFomKAgExACMpZUQSRCMnB2VESSIIJwdMZ0kWJwpLAVBJvEiL/r8nBEsBUCMWTEsBvycFSwJQSwG/K0sCUCIWvycISwJQi/8WvyMoZUQnC0sDUEwWvycJTwJQTL+JigEEi/8WJwpLAVC+RCcESwJQvkwXI0xPAk0nBUsDUL5MFyNMTwJNK08EUL5MFyNMTwJNiYoCACOAACoxAFC+TBdMQQB9iwIiEkEAdiJEi/4WSYwAK0xQvkwXjAFBAF+LASISQQBYIkQnCIsASU4CUL5EFzIGD0RJMQBQJwxMUL5FARRESTEAUCcMTFAiFr8nCUxQSb5EFyIIFr+L/yISQQAOJwSLAFBJvkQXIggWv4knBYsAUEm+RBciCBa/iSNC/6UjQv+HigEAgACL/xZJK0xQSb5MF0xBAFiLAyISQQBRIkQnC4sBSU4CUL5EFycJSwJQvkQXJwhPA1C+RBeMABJAAAgyBosAD0EAIiJEJwSLAUlOAlC+RBcnBU8CUL5EFw2BAyRPAk0WiwJMv4kjQv/bI0L/rIoCACOAADEAIyllRBJEi/4WSStMUL5MF0xBADiLAyQSQQAxIkSAA2FjY4sCUIv/vyqL/1BJjAC+TBeMAUEABYsBQAAPIhaLAEy/IyhlRCIIKExniSNC/8w=","clear":"CoEBQw=="},"compilerInfo":{"compiler":"puya","compilerVersion":{"major":4,"minor":10,"patch":0}},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the VotingApp contract
 */
export type VotingAppArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'create(account)void': {
      admin: Uint8Array | string
    }
    'add_member(account)void': {
      acct: Uint8Array | string
    }
    'remove_member(account)void': {
      acct: Uint8Array | string
    }
    'is_member(account)uint64': {
      acct: Uint8Array | string
    }
    'create_proposal(string,uint64)uint64': {
      description: string
      endRound: bigint | number
    }
    'get_proposal_details(uint64)(string,uint64,uint64,uint64)': {
      pid: bigint | number
    }
    'vote(uint64,uint64)void': {
      pid: bigint | number
      choice: bigint | number
    }
    'finalize(uint64)void': {
      pid: bigint | number
    }
    'record_accept(uint64,account)void': {
      pid: bigint | number
      candidate: Uint8Array | string
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'create(account)void': [admin: Uint8Array | string]
    'add_member(account)void': [acct: Uint8Array | string]
    'remove_member(account)void': [acct: Uint8Array | string]
    'is_member(account)uint64': [acct: Uint8Array | string]
    'create_proposal(string,uint64)uint64': [description: string, endRound: bigint | number]
    'get_proposal_details(uint64)(string,uint64,uint64,uint64)': [pid: bigint | number]
    'vote(uint64,uint64)void': [pid: bigint | number, choice: bigint | number]
    'finalize(uint64)void': [pid: bigint | number]
    'record_accept(uint64,account)void': [pid: bigint | number, candidate: Uint8Array | string]
  }
}

/**
 * The return type for each method
 */
export type VotingAppReturns = {
  'create(account)void': void
  'add_member(account)void': void
  'remove_member(account)void': void
  'is_member(account)uint64': bigint
  'create_proposal(string,uint64)uint64': bigint
  'get_proposal_details(uint64)(string,uint64,uint64,uint64)': [string, bigint, bigint, bigint]
  'vote(uint64,uint64)void': void
  'finalize(uint64)void': void
  'record_accept(uint64,account)void': void
}

/**
 * Defines the types of available calls and state of the VotingApp smart contract.
 */
export type VotingAppTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'create(account)void' | 'create', {
      argsObj: VotingAppArgs['obj']['create(account)void']
      argsTuple: VotingAppArgs['tuple']['create(account)void']
      returns: VotingAppReturns['create(account)void']
    }>
    & Record<'add_member(account)void' | 'add_member', {
      argsObj: VotingAppArgs['obj']['add_member(account)void']
      argsTuple: VotingAppArgs['tuple']['add_member(account)void']
      returns: VotingAppReturns['add_member(account)void']
    }>
    & Record<'remove_member(account)void' | 'remove_member', {
      argsObj: VotingAppArgs['obj']['remove_member(account)void']
      argsTuple: VotingAppArgs['tuple']['remove_member(account)void']
      returns: VotingAppReturns['remove_member(account)void']
    }>
    & Record<'is_member(account)uint64' | 'is_member', {
      argsObj: VotingAppArgs['obj']['is_member(account)uint64']
      argsTuple: VotingAppArgs['tuple']['is_member(account)uint64']
      returns: VotingAppReturns['is_member(account)uint64']
    }>
    & Record<'create_proposal(string,uint64)uint64' | 'create_proposal', {
      argsObj: VotingAppArgs['obj']['create_proposal(string,uint64)uint64']
      argsTuple: VotingAppArgs['tuple']['create_proposal(string,uint64)uint64']
      returns: VotingAppReturns['create_proposal(string,uint64)uint64']
    }>
    & Record<'get_proposal_details(uint64)(string,uint64,uint64,uint64)' | 'get_proposal_details', {
      argsObj: VotingAppArgs['obj']['get_proposal_details(uint64)(string,uint64,uint64,uint64)']
      argsTuple: VotingAppArgs['tuple']['get_proposal_details(uint64)(string,uint64,uint64,uint64)']
      returns: VotingAppReturns['get_proposal_details(uint64)(string,uint64,uint64,uint64)']
    }>
    & Record<'vote(uint64,uint64)void' | 'vote', {
      argsObj: VotingAppArgs['obj']['vote(uint64,uint64)void']
      argsTuple: VotingAppArgs['tuple']['vote(uint64,uint64)void']
      returns: VotingAppReturns['vote(uint64,uint64)void']
    }>
    & Record<'finalize(uint64)void' | 'finalize', {
      argsObj: VotingAppArgs['obj']['finalize(uint64)void']
      argsTuple: VotingAppArgs['tuple']['finalize(uint64)void']
      returns: VotingAppReturns['finalize(uint64)void']
    }>
    & Record<'record_accept(uint64,account)void' | 'record_accept', {
      argsObj: VotingAppArgs['obj']['record_accept(uint64,account)void']
      argsTuple: VotingAppArgs['tuple']['record_accept(uint64,account)void']
      returns: VotingAppReturns['record_accept(uint64,account)void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        admin: string
        nextPid: bigint
        memberCount: bigint
      }
      maps: {}
    }
    box: {
      keys: {}
      maps: {
        members: Map<string, bigint>
        proposals: Map<bigint | number, string>
        yesVotes: Map<bigint | number, bigint>
        noVotes: Map<bigint | number, bigint>
        status: Map<bigint | number, bigint>
        endRound: Map<bigint | number, bigint>
        requiredN: Map<bigint | number, bigint>
        votedN: Map<bigint | number, bigint>
        voteReceipt: Map<[bigint | number, string], bigint>
        accepted: Map<bigint | number, string>
      }
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type VotingAppSignatures = keyof VotingAppTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type VotingAppNonVoidMethodSignatures = keyof VotingAppTypes['methods'] extends infer T ? T extends keyof VotingAppTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the VotingApp smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends VotingAppSignatures> = VotingAppTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the VotingApp smart contract to the method's return type
 */
export type MethodReturn<TSignature extends VotingAppSignatures> = VotingAppTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = VotingAppTypes['state']['global']['keys']

/**
 * Defines the shape of the keyed box state of the application.
 */
export type BoxKeysState = VotingAppTypes['state']['box']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type VotingAppCreateCallParams =
  | Expand<CallParams<VotingAppArgs['obj']['create(account)void'] | VotingAppArgs['tuple']['create(account)void']> & {method: 'create'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<VotingAppArgs['obj']['create(account)void'] | VotingAppArgs['tuple']['create(account)void']> & {method: 'create(account)void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type VotingAppDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: VotingAppCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the VotingApp smart contract
 */
export abstract class VotingAppParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends VotingAppCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'create':
          case 'create(account)void':
            return VotingAppParamsFactory.create.create(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the VotingApp smart contract using the create(account)void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      create(params: CallParams<VotingAppArgs['obj']['create(account)void'] | VotingAppArgs['tuple']['create(account)void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'create(account)void' as const,
          args: Array.isArray(params.args) ? params.args : [params.args.admin],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the add_member(account)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static addMember(params: CallParams<VotingAppArgs['obj']['add_member(account)void'] | VotingAppArgs['tuple']['add_member(account)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'add_member(account)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.acct],
    }
  }
  /**
   * Constructs a no op call for the remove_member(account)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static removeMember(params: CallParams<VotingAppArgs['obj']['remove_member(account)void'] | VotingAppArgs['tuple']['remove_member(account)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'remove_member(account)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.acct],
    }
  }
  /**
   * Constructs a no op call for the is_member(account)uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static isMember(params: CallParams<VotingAppArgs['obj']['is_member(account)uint64'] | VotingAppArgs['tuple']['is_member(account)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'is_member(account)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.acct],
    }
  }
  /**
   * Constructs a no op call for the create_proposal(string,uint64)uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static createProposal(params: CallParams<VotingAppArgs['obj']['create_proposal(string,uint64)uint64'] | VotingAppArgs['tuple']['create_proposal(string,uint64)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'create_proposal(string,uint64)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.description, params.args.endRound],
    }
  }
  /**
   * Constructs a no op call for the get_proposal_details(uint64)(string,uint64,uint64,uint64) ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getProposalDetails(params: CallParams<VotingAppArgs['obj']['get_proposal_details(uint64)(string,uint64,uint64,uint64)'] | VotingAppArgs['tuple']['get_proposal_details(uint64)(string,uint64,uint64,uint64)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'get_proposal_details(uint64)(string,uint64,uint64,uint64)' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.pid],
    }
  }
  /**
   * Constructs a no op call for the vote(uint64,uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static vote(params: CallParams<VotingAppArgs['obj']['vote(uint64,uint64)void'] | VotingAppArgs['tuple']['vote(uint64,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'vote(uint64,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.pid, params.args.choice],
    }
  }
  /**
   * Constructs a no op call for the finalize(uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static finalize(params: CallParams<VotingAppArgs['obj']['finalize(uint64)void'] | VotingAppArgs['tuple']['finalize(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'finalize(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.pid],
    }
  }
  /**
   * Constructs a no op call for the record_accept(uint64,account)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static recordAccept(params: CallParams<VotingAppArgs['obj']['record_accept(uint64,account)void'] | VotingAppArgs['tuple']['record_accept(uint64,account)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'record_accept(uint64,account)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.pid, params.args.candidate],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the VotingApp smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class VotingAppFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `VotingAppFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new VotingAppClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new VotingAppClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the VotingApp smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: VotingAppDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? VotingAppParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (VotingAppCreateCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new VotingAppClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the VotingApp smart contract using the create(account)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      create: (params: CallParams<VotingAppArgs['obj']['create(account)void'] | VotingAppArgs['tuple']['create(account)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.params.create(VotingAppParamsFactory.create.create(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the VotingApp smart contract using the create(account)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      create: (params: CallParams<VotingAppArgs['obj']['create(account)void'] | VotingAppArgs['tuple']['create(account)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.createTransaction.create(VotingAppParamsFactory.create.create(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the VotingApp smart contract using an ABI method call using the create(account)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      create: async (params: CallParams<VotingAppArgs['obj']['create(account)void'] | VotingAppArgs['tuple']['create(account)void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        const result = await this.appFactory.send.create(VotingAppParamsFactory.create.create(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | VotingAppReturns['create(account)void']) }, appClient: new VotingAppClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the VotingApp smart contract
 */
export class VotingAppClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `VotingAppClient`
   *
   * @param appClient An `AppClient` instance which has been created with the VotingApp app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `VotingAppClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends VotingAppNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `VotingAppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<VotingAppClient> {
    return new VotingAppClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `VotingAppClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<VotingAppClient> {
    return new VotingAppClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the VotingApp smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the VotingApp smart contract using the `add_member(account)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    addMember: (params: CallParams<VotingAppArgs['obj']['add_member(account)void'] | VotingAppArgs['tuple']['add_member(account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(VotingAppParamsFactory.addMember(params))
    },

    /**
     * Makes a call to the VotingApp smart contract using the `remove_member(account)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    removeMember: (params: CallParams<VotingAppArgs['obj']['remove_member(account)void'] | VotingAppArgs['tuple']['remove_member(account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(VotingAppParamsFactory.removeMember(params))
    },

    /**
     * Makes a call to the VotingApp smart contract using the `is_member(account)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    isMember: (params: CallParams<VotingAppArgs['obj']['is_member(account)uint64'] | VotingAppArgs['tuple']['is_member(account)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(VotingAppParamsFactory.isMember(params))
    },

    /**
     * Makes a call to the VotingApp smart contract using the `create_proposal(string,uint64)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    createProposal: (params: CallParams<VotingAppArgs['obj']['create_proposal(string,uint64)uint64'] | VotingAppArgs['tuple']['create_proposal(string,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(VotingAppParamsFactory.createProposal(params))
    },

    /**
     * Makes a call to the VotingApp smart contract using the `get_proposal_details(uint64)(string,uint64,uint64,uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getProposalDetails: (params: CallParams<VotingAppArgs['obj']['get_proposal_details(uint64)(string,uint64,uint64,uint64)'] | VotingAppArgs['tuple']['get_proposal_details(uint64)(string,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(VotingAppParamsFactory.getProposalDetails(params))
    },

    /**
     * Makes a call to the VotingApp smart contract using the `vote(uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    vote: (params: CallParams<VotingAppArgs['obj']['vote(uint64,uint64)void'] | VotingAppArgs['tuple']['vote(uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(VotingAppParamsFactory.vote(params))
    },

    /**
     * Makes a call to the VotingApp smart contract using the `finalize(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    finalize: (params: CallParams<VotingAppArgs['obj']['finalize(uint64)void'] | VotingAppArgs['tuple']['finalize(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(VotingAppParamsFactory.finalize(params))
    },

    /**
     * Makes a call to the VotingApp smart contract using the `record_accept(uint64,account)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    recordAccept: (params: CallParams<VotingAppArgs['obj']['record_accept(uint64,account)void'] | VotingAppArgs['tuple']['record_accept(uint64,account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(VotingAppParamsFactory.recordAccept(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the VotingApp smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the VotingApp smart contract using the `add_member(account)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    addMember: (params: CallParams<VotingAppArgs['obj']['add_member(account)void'] | VotingAppArgs['tuple']['add_member(account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(VotingAppParamsFactory.addMember(params))
    },

    /**
     * Makes a call to the VotingApp smart contract using the `remove_member(account)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    removeMember: (params: CallParams<VotingAppArgs['obj']['remove_member(account)void'] | VotingAppArgs['tuple']['remove_member(account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(VotingAppParamsFactory.removeMember(params))
    },

    /**
     * Makes a call to the VotingApp smart contract using the `is_member(account)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    isMember: (params: CallParams<VotingAppArgs['obj']['is_member(account)uint64'] | VotingAppArgs['tuple']['is_member(account)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(VotingAppParamsFactory.isMember(params))
    },

    /**
     * Makes a call to the VotingApp smart contract using the `create_proposal(string,uint64)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    createProposal: (params: CallParams<VotingAppArgs['obj']['create_proposal(string,uint64)uint64'] | VotingAppArgs['tuple']['create_proposal(string,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(VotingAppParamsFactory.createProposal(params))
    },

    /**
     * Makes a call to the VotingApp smart contract using the `get_proposal_details(uint64)(string,uint64,uint64,uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getProposalDetails: (params: CallParams<VotingAppArgs['obj']['get_proposal_details(uint64)(string,uint64,uint64,uint64)'] | VotingAppArgs['tuple']['get_proposal_details(uint64)(string,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(VotingAppParamsFactory.getProposalDetails(params))
    },

    /**
     * Makes a call to the VotingApp smart contract using the `vote(uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    vote: (params: CallParams<VotingAppArgs['obj']['vote(uint64,uint64)void'] | VotingAppArgs['tuple']['vote(uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(VotingAppParamsFactory.vote(params))
    },

    /**
     * Makes a call to the VotingApp smart contract using the `finalize(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    finalize: (params: CallParams<VotingAppArgs['obj']['finalize(uint64)void'] | VotingAppArgs['tuple']['finalize(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(VotingAppParamsFactory.finalize(params))
    },

    /**
     * Makes a call to the VotingApp smart contract using the `record_accept(uint64,account)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    recordAccept: (params: CallParams<VotingAppArgs['obj']['record_accept(uint64,account)void'] | VotingAppArgs['tuple']['record_accept(uint64,account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(VotingAppParamsFactory.recordAccept(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the VotingApp smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the VotingApp smart contract using the `add_member(account)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    addMember: async (params: CallParams<VotingAppArgs['obj']['add_member(account)void'] | VotingAppArgs['tuple']['add_member(account)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(VotingAppParamsFactory.addMember(params))
      return {...result, return: result.return as unknown as (undefined | VotingAppReturns['add_member(account)void'])}
    },

    /**
     * Makes a call to the VotingApp smart contract using the `remove_member(account)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    removeMember: async (params: CallParams<VotingAppArgs['obj']['remove_member(account)void'] | VotingAppArgs['tuple']['remove_member(account)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(VotingAppParamsFactory.removeMember(params))
      return {...result, return: result.return as unknown as (undefined | VotingAppReturns['remove_member(account)void'])}
    },

    /**
     * Makes a call to the VotingApp smart contract using the `is_member(account)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    isMember: async (params: CallParams<VotingAppArgs['obj']['is_member(account)uint64'] | VotingAppArgs['tuple']['is_member(account)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(VotingAppParamsFactory.isMember(params))
      return {...result, return: result.return as unknown as (undefined | VotingAppReturns['is_member(account)uint64'])}
    },

    /**
     * Makes a call to the VotingApp smart contract using the `create_proposal(string,uint64)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    createProposal: async (params: CallParams<VotingAppArgs['obj']['create_proposal(string,uint64)uint64'] | VotingAppArgs['tuple']['create_proposal(string,uint64)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(VotingAppParamsFactory.createProposal(params))
      return {...result, return: result.return as unknown as (undefined | VotingAppReturns['create_proposal(string,uint64)uint64'])}
    },

    /**
     * Makes a call to the VotingApp smart contract using the `get_proposal_details(uint64)(string,uint64,uint64,uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getProposalDetails: async (params: CallParams<VotingAppArgs['obj']['get_proposal_details(uint64)(string,uint64,uint64,uint64)'] | VotingAppArgs['tuple']['get_proposal_details(uint64)(string,uint64,uint64,uint64)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(VotingAppParamsFactory.getProposalDetails(params))
      return {...result, return: result.return as unknown as (undefined | VotingAppReturns['get_proposal_details(uint64)(string,uint64,uint64,uint64)'])}
    },

    /**
     * Makes a call to the VotingApp smart contract using the `vote(uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    vote: async (params: CallParams<VotingAppArgs['obj']['vote(uint64,uint64)void'] | VotingAppArgs['tuple']['vote(uint64,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(VotingAppParamsFactory.vote(params))
      return {...result, return: result.return as unknown as (undefined | VotingAppReturns['vote(uint64,uint64)void'])}
    },

    /**
     * Makes a call to the VotingApp smart contract using the `finalize(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    finalize: async (params: CallParams<VotingAppArgs['obj']['finalize(uint64)void'] | VotingAppArgs['tuple']['finalize(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(VotingAppParamsFactory.finalize(params))
      return {...result, return: result.return as unknown as (undefined | VotingAppReturns['finalize(uint64)void'])}
    },

    /**
     * Makes a call to the VotingApp smart contract using the `record_accept(uint64,account)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    recordAccept: async (params: CallParams<VotingAppArgs['obj']['record_accept(uint64,account)void'] | VotingAppArgs['tuple']['record_accept(uint64,account)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(VotingAppParamsFactory.recordAccept(params))
      return {...result, return: result.return as unknown as (undefined | VotingAppReturns['record_accept(uint64,account)void'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new VotingAppClient(this.appClient.clone(params))
  }

  /**
   * Makes a readonly (simulated) call to the VotingApp smart contract using the `get_proposal_details(uint64)(string,uint64,uint64,uint64)` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getProposalDetails(params: CallParams<VotingAppArgs['obj']['get_proposal_details(uint64)(string,uint64,uint64,uint64)'] | VotingAppArgs['tuple']['get_proposal_details(uint64)(string,uint64,uint64,uint64)']>) {
    const result = await this.appClient.send.call(VotingAppParamsFactory.getProposalDetails(params))
    return result.return as unknown as VotingAppReturns['get_proposal_details(uint64)(string,uint64,uint64,uint64)']
  }

  /**
   * Methods to access state for the current VotingApp app
   */
  state = {
    /**
     * Methods to access global state for the current VotingApp app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          admin: result.admin,
          nextPid: result.next_pid,
          memberCount: result.member_count,
        }
      },
      /**
       * Get the current value of the admin key in global state
       */
      admin: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("admin")) as string | undefined },
      /**
       * Get the current value of the next_pid key in global state
       */
      nextPid: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("next_pid")) as bigint | undefined },
      /**
       * Get the current value of the member_count key in global state
       */
      memberCount: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("member_count")) as bigint | undefined },
    },
    /**
     * Methods to access box state for the current VotingApp app
     */
    box: {
      /**
       * Get all current keyed values from box state
       */
      getAll: async (): Promise<Partial<Expand<BoxKeysState>>> => {
        const result = await this.appClient.state.box.getAll()
        return {
        }
      },
      /**
       * Get values from the members map in box state
       */
      members: {
        /**
         * Get all current values of the members map in box state
         */
        getMap: async (): Promise<Map<string, bigint>> => { return (await this.appClient.state.box.getMap("members")) as Map<string, bigint> },
        /**
         * Get a current value of the members map by key from box state
         */
        value: async (key: string): Promise<bigint | undefined> => { return await this.appClient.state.box.getMapValue("members", key) as bigint | undefined },
      },
      /**
       * Get values from the proposals map in box state
       */
      proposals: {
        /**
         * Get all current values of the proposals map in box state
         */
        getMap: async (): Promise<Map<bigint, string>> => { return (await this.appClient.state.box.getMap("proposals")) as Map<bigint, string> },
        /**
         * Get a current value of the proposals map by key from box state
         */
        value: async (key: bigint | number): Promise<string | undefined> => { return await this.appClient.state.box.getMapValue("proposals", key) as string | undefined },
      },
      /**
       * Get values from the yes_votes map in box state
       */
      yesVotes: {
        /**
         * Get all current values of the yes_votes map in box state
         */
        getMap: async (): Promise<Map<bigint, bigint>> => { return (await this.appClient.state.box.getMap("yes_votes")) as Map<bigint, bigint> },
        /**
         * Get a current value of the yes_votes map by key from box state
         */
        value: async (key: bigint | number): Promise<bigint | undefined> => { return await this.appClient.state.box.getMapValue("yes_votes", key) as bigint | undefined },
      },
      /**
       * Get values from the no_votes map in box state
       */
      noVotes: {
        /**
         * Get all current values of the no_votes map in box state
         */
        getMap: async (): Promise<Map<bigint, bigint>> => { return (await this.appClient.state.box.getMap("no_votes")) as Map<bigint, bigint> },
        /**
         * Get a current value of the no_votes map by key from box state
         */
        value: async (key: bigint | number): Promise<bigint | undefined> => { return await this.appClient.state.box.getMapValue("no_votes", key) as bigint | undefined },
      },
      /**
       * Get values from the status map in box state
       */
      status: {
        /**
         * Get all current values of the status map in box state
         */
        getMap: async (): Promise<Map<bigint, bigint>> => { return (await this.appClient.state.box.getMap("status")) as Map<bigint, bigint> },
        /**
         * Get a current value of the status map by key from box state
         */
        value: async (key: bigint | number): Promise<bigint | undefined> => { return await this.appClient.state.box.getMapValue("status", key) as bigint | undefined },
      },
      /**
       * Get values from the end_round map in box state
       */
      endRound: {
        /**
         * Get all current values of the end_round map in box state
         */
        getMap: async (): Promise<Map<bigint, bigint>> => { return (await this.appClient.state.box.getMap("end_round")) as Map<bigint, bigint> },
        /**
         * Get a current value of the end_round map by key from box state
         */
        value: async (key: bigint | number): Promise<bigint | undefined> => { return await this.appClient.state.box.getMapValue("end_round", key) as bigint | undefined },
      },
      /**
       * Get values from the required_n map in box state
       */
      requiredN: {
        /**
         * Get all current values of the required_n map in box state
         */
        getMap: async (): Promise<Map<bigint, bigint>> => { return (await this.appClient.state.box.getMap("required_n")) as Map<bigint, bigint> },
        /**
         * Get a current value of the required_n map by key from box state
         */
        value: async (key: bigint | number): Promise<bigint | undefined> => { return await this.appClient.state.box.getMapValue("required_n", key) as bigint | undefined },
      },
      /**
       * Get values from the voted_n map in box state
       */
      votedN: {
        /**
         * Get all current values of the voted_n map in box state
         */
        getMap: async (): Promise<Map<bigint, bigint>> => { return (await this.appClient.state.box.getMap("voted_n")) as Map<bigint, bigint> },
        /**
         * Get a current value of the voted_n map by key from box state
         */
        value: async (key: bigint | number): Promise<bigint | undefined> => { return await this.appClient.state.box.getMapValue("voted_n", key) as bigint | undefined },
      },
      /**
       * Get values from the vote_receipt map in box state
       */
      voteReceipt: {
        /**
         * Get all current values of the vote_receipt map in box state
         */
        getMap: async (): Promise<Map<[bigint, string], bigint>> => { return (await this.appClient.state.box.getMap("vote_receipt")) as Map<[bigint, string], bigint> },
        /**
         * Get a current value of the vote_receipt map by key from box state
         */
        value: async (key: [bigint | number, string]): Promise<bigint | undefined> => { return await this.appClient.state.box.getMapValue("vote_receipt", key) as bigint | undefined },
      },
      /**
       * Get values from the accepted map in box state
       */
      accepted: {
        /**
         * Get all current values of the accepted map in box state
         */
        getMap: async (): Promise<Map<bigint, string>> => { return (await this.appClient.state.box.getMap("accepted")) as Map<bigint, string> },
        /**
         * Get a current value of the accepted map by key from box state
         */
        value: async (key: bigint | number): Promise<string | undefined> => { return await this.appClient.state.box.getMapValue("accepted", key) as string | undefined },
      },
    },
  }

  public newGroup(): VotingAppComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a add_member(account)void method call against the VotingApp contract
       */
      addMember(params: CallParams<VotingAppArgs['obj']['add_member(account)void'] | VotingAppArgs['tuple']['add_member(account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.addMember(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a remove_member(account)void method call against the VotingApp contract
       */
      removeMember(params: CallParams<VotingAppArgs['obj']['remove_member(account)void'] | VotingAppArgs['tuple']['remove_member(account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.removeMember(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a is_member(account)uint64 method call against the VotingApp contract
       */
      isMember(params: CallParams<VotingAppArgs['obj']['is_member(account)uint64'] | VotingAppArgs['tuple']['is_member(account)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.isMember(params)))
        resultMappers.push((v) => client.decodeReturnValue('is_member(account)uint64', v))
        return this
      },
      /**
       * Add a create_proposal(string,uint64)uint64 method call against the VotingApp contract
       */
      createProposal(params: CallParams<VotingAppArgs['obj']['create_proposal(string,uint64)uint64'] | VotingAppArgs['tuple']['create_proposal(string,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.createProposal(params)))
        resultMappers.push((v) => client.decodeReturnValue('create_proposal(string,uint64)uint64', v))
        return this
      },
      /**
       * Add a get_proposal_details(uint64)(string,uint64,uint64,uint64) method call against the VotingApp contract
       */
      getProposalDetails(params: CallParams<VotingAppArgs['obj']['get_proposal_details(uint64)(string,uint64,uint64,uint64)'] | VotingAppArgs['tuple']['get_proposal_details(uint64)(string,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getProposalDetails(params)))
        resultMappers.push((v) => client.decodeReturnValue('get_proposal_details(uint64)(string,uint64,uint64,uint64)', v))
        return this
      },
      /**
       * Add a vote(uint64,uint64)void method call against the VotingApp contract
       */
      vote(params: CallParams<VotingAppArgs['obj']['vote(uint64,uint64)void'] | VotingAppArgs['tuple']['vote(uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.vote(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a finalize(uint64)void method call against the VotingApp contract
       */
      finalize(params: CallParams<VotingAppArgs['obj']['finalize(uint64)void'] | VotingAppArgs['tuple']['finalize(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.finalize(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a record_accept(uint64,account)void method call against the VotingApp contract
       */
      recordAccept(params: CallParams<VotingAppArgs['obj']['record_accept(uint64,account)void'] | VotingAppArgs['tuple']['record_accept(uint64,account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.recordAccept(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a clear state call to the VotingApp contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as VotingAppComposer
  }
}
export type VotingAppComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the add_member(account)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  addMember(params?: CallParams<VotingAppArgs['obj']['add_member(account)void'] | VotingAppArgs['tuple']['add_member(account)void']>): VotingAppComposer<[...TReturns, VotingAppReturns['add_member(account)void'] | undefined]>

  /**
   * Calls the remove_member(account)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  removeMember(params?: CallParams<VotingAppArgs['obj']['remove_member(account)void'] | VotingAppArgs['tuple']['remove_member(account)void']>): VotingAppComposer<[...TReturns, VotingAppReturns['remove_member(account)void'] | undefined]>

  /**
   * Calls the is_member(account)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  isMember(params?: CallParams<VotingAppArgs['obj']['is_member(account)uint64'] | VotingAppArgs['tuple']['is_member(account)uint64']>): VotingAppComposer<[...TReturns, VotingAppReturns['is_member(account)uint64'] | undefined]>

  /**
   * Calls the create_proposal(string,uint64)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createProposal(params?: CallParams<VotingAppArgs['obj']['create_proposal(string,uint64)uint64'] | VotingAppArgs['tuple']['create_proposal(string,uint64)uint64']>): VotingAppComposer<[...TReturns, VotingAppReturns['create_proposal(string,uint64)uint64'] | undefined]>

  /**
   * Calls the get_proposal_details(uint64)(string,uint64,uint64,uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getProposalDetails(params?: CallParams<VotingAppArgs['obj']['get_proposal_details(uint64)(string,uint64,uint64,uint64)'] | VotingAppArgs['tuple']['get_proposal_details(uint64)(string,uint64,uint64,uint64)']>): VotingAppComposer<[...TReturns, VotingAppReturns['get_proposal_details(uint64)(string,uint64,uint64,uint64)'] | undefined]>

  /**
   * Calls the vote(uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  vote(params?: CallParams<VotingAppArgs['obj']['vote(uint64,uint64)void'] | VotingAppArgs['tuple']['vote(uint64,uint64)void']>): VotingAppComposer<[...TReturns, VotingAppReturns['vote(uint64,uint64)void'] | undefined]>

  /**
   * Calls the finalize(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  finalize(params?: CallParams<VotingAppArgs['obj']['finalize(uint64)void'] | VotingAppArgs['tuple']['finalize(uint64)void']>): VotingAppComposer<[...TReturns, VotingAppReturns['finalize(uint64)void'] | undefined]>

  /**
   * Calls the record_accept(uint64,account)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  recordAccept(params?: CallParams<VotingAppArgs['obj']['record_accept(uint64,account)void'] | VotingAppArgs['tuple']['record_accept(uint64,account)void']>): VotingAppComposer<[...TReturns, VotingAppReturns['record_accept(uint64,account)void'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the VotingApp smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): VotingAppComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): VotingAppComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<VotingAppComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<VotingAppComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<VotingAppComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<VotingAppComposerResults<TReturns>>
}
export type VotingAppComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

